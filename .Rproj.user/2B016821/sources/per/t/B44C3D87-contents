# Filestructure {#structure}

## Introduction

In this chapter we describe the anatomy of a package: the types of files and their organization into various directories.


## Scenarios

The following diagram depicts three possible filestructures for a package.

```{r echo = FALSE, fig.cap='Three possible filestructures for a package'}
knitr::include_graphics("images/pkg-structures.png")
```


## Minimal Package

The first option is what is considered to be a __minimal__ package. 

```{r echo = FALSE, fig.cap='Filestructure of a minimal package', out.width = "30%"}
knitr::include_graphics("images/pkg-structures1.png")
```

Every package must have at least the following four components: 

- `DESCRIPTION` file
- `NAMESPACE` file
- `R/` directory
- `man/` directory



## Default devtools setting

The second option corresponds to the __default structure__ generated by RStudio when you use an RStudio project---via the package `"devtools"`. 

```{r echo = FALSE, fig.cap='Default filestructure created by devtools', out.width = "30%"}
knitr::include_graphics("images/pkg-structures2.png")
```

In addition to the files and directories of the previous option, now there are two more files:

- A text file `.Rproj` (i.e. an RStudio project file)
- A text file `.Rbuildignore` file



## Our working example

The third option is the actual structure for our __working example__. Starting with a default structure, we can add more elements like a `README.md` files, and directories for `tests/` and `vignettes/`. The extra directory `inst/` is generated in the building process.

```{r echo = FALSE, fig.cap='Filestructure of the working example', out.width = "30%"}
knitr::include_graphics("images/pkg-structures3.png")
```

Starting with a default structure, we can add more elements like a `README.md` files, and directories for `tests/` and `vignettes/`. The extra directory `inst/` is generated in the building process.



